LUONNOSTELU
concurrency (versiointi)
  -tehdään siirto... siinä mukana tulee versionumero? jos tietokannassa oleva numero sama
  kuin pyynnön mukana tuleva niin tehdään muutos. jos ei niin perutaan?
  -frontti lähettää nyt versio numeron
  -backki käsittely vielä
  -vielä peruminen frontissa jos epäonnistuu. aina kun mikää epäonnistuu niin ladataan kaikki uusiski

ratakisu 1 tehään tämä ainakin ensin
palautetaan uusi järjestys ja versionumero
  -tällä voi korjata ongelmia. se voi päivittää virheen
  -hitaampi ja useimmiten toistoa
  -robust>effeciency

ratakisu 2
palautetaan vaan tieto että meni pieleen
  -teoriassa ei pitäisi tarvita mitään muuta
  -jos joku muu oli tekemässä muutosta niin niitten muutos broadcast on matkalla
  -hauraampi

muut ws päivitykset
  -todo muokkaus
  -todo poisto
  -todo lisäys
  -notepad lisäys
  -notepad poisto
  -notepad siirto? ei tehdä. ehkä myöhemmin
tarviinko versioinnin notepadeillekkin?


REST API
todo-order
  "reorder todos" PATCH /api/todo-order/reorder
    reorders todos in a notepad

notepads
  "get all todos" GET /api/notepads/{notepad_id}/todos
    saa parametrinä notepad id:n
    palauttaa kaikki siihen liitetyt todot järjestettynä todoorder mukaan
  "add todo" POST /api/notepads/{notepad_id}/todos
    saa parametrinä notepad id:n
    luo uuden todon ja liittää sen notepadiin
  "get notepad" GET /api/notepads/{company_slug}
    palauttaa kaikki notepadit mitkä kuuluu firmalle
  "add notepad" POST /api/notepads/{company_slug}
    luo uuden notepadin ja liittää sen firmalle
  

todos
  "delete todo" DELETE /api/todos/{todo_id}
    saa parametrinä todo id:n
  "update todo" PUT /api/todos/{todo_id}
    saa parametrinä todo id:n
    muokkaa tekstiä
  "toggle status" PATCH /api/todos/{todo_id}/status
    saa parametrinä todo id:n
    käytetään is_done kääntöön

companies
  "get cover letter" GET /api/companies/{company_slug}/cover-letter
    saa parametrinä firman slugin
    palauttaa cover_letter(letter_en ja letter_fi)

  "get cv" GET /api/companies/{company_slug}/cv
    saa parametrinä firman slugin
      companies taulust select cv_id where company_slug=company_slug
      from cv_component_mappings select component_id where cv_id=cv_id order_by display_order
      from cv_components select category, text_fi, text_en where id=component_id
    palauttaa ne komponentit oikeassa järjestyksessä

TESTIDATA
1 sql skripti
  ehkä helpompi??
2 laravel tsydeemi
  tyylikkäämpi
  ehkä helpompi update: lol ei :D
  oppis jotain laravelista
  helpompi sit tuotannossa alustaa uudestaan

NOTEPADIT
tehdään niistä samanlainen kuin todot. tehdään niille oma order taulu ja lisätään companiesiin versionti

controller todo
  -todot järkättynä notepad id:n mukaan
  -notepad id on todo listaelementtien tiedossa. tulee kun näpäytetään notepadin nimeä

controller company
  -notepadit järkättynä company id:n mukaan
  -mistä saa company id:n? notepad_lista? 

provider uudelleenjärjestely
kontrollerit
  -komponentit kutsuu näitä
  -täältä kutsutaan provider funktioita
provider
  -sisältää tilan
  -funktiot jotka hoitaa optimistisen päivityksen ja kutsuu serviceä. hoitaa myös virheet
web_socket_handler
  -käyttää provideriä
  -käsittelee websocket päivitysviestit. kutsuu funktioita jotka on samassa
  -poistaa tempit ja lisää muutokset provider tilaan
servicet
  -pelkästään tekee apikutsuja

todo_list kutsuu kaikkien todo hakua. onko hyvä?

notepad
lisäys

abaut avaaminen
ongelma on että section header ja entry ovat erikseen, mutta niitä pitäiisi käsitellä samalla tavalla
tai ehkä vaan siinä vaiheessa kun käsitellään section header niin käsitellään kaikki seuraavat entryt samalla
siis kun tulee vastaan niin otetaan kaikki sitä seuraavat entryt ja syötetään ne samalle expandable widgetille


ost
frontista lähtee backkiin reorder request
backissä tarkistetaan onko order version oikein
jos ei niin palautetaan virhe josta frontti osaa ladata uudestaan
jos on niin inkrementoidaan order version
ja lähetetään broadcast jossa on uusi order version
frontti päivittää sen ja käyttää sitä seuraavassa reorder requestissa
frontissa ei inkrementoida mitään

desktop päivitykset

mobiili -> desktop
  poisto toimii
  lisäys toimii
  muokkaust toimii
  siirto toimii

desktop -> mobiili 
  poisto toimii
  lisäys toimii
  muokkaus toimii

desktop siirto
mobiili käyttää kirjastoa ReorderableListWidget
jos löytyis samanlainen

about sivu päivitys:
  section headerien categorioita muutetaan hiukan, niin että letter ja info headerit voidaan tunnistaa koodissa
  
  luodaan uusi taulu vain infoa varten

  muokataan frontin logiikkaa toimimaan uudella tavalla


MIGRAATIOT PRODISSA 
  -eli pitää yhdistää mun paikallinen laravel pilven kantaan 
DB_HOST 
DB_PORT 
DB_USERNAME 
DB_PASSWORD 
DB_DATABASE 

FLUTTER TESTIT
flutter drive   --driver=test_driver/integration_test.dart   --target=integration_test/app_test.dart   -d chrome

pitää olla avaimia

testi 1:
notepad sivultä löytyy oikeat notepadit

testi 2:
about sivulta löytyy info ja letter ja silleen

testi 3:
uuden notepadin luominen onnistuu

testi 4:


VAIHE CI/CD

  -jotain pari e2e testei flutterille
    luodaan testaus setup eli:
    docker compose, jokainen image omalla testinimellään
    DB aika normi mutta testi asetuksilla jotka voi mennä gittiin np
    BE saa composessa oikeat ympäristömuuttujat
    BE sisältää sen initseederin jonka dataa vasten tehdään testei
    FRONTTI käyttää niitä devaus env muuttujia yhteyden muodostamiseen
    FRONTISSA on sitten jotain testei jotka ajetaan... jotenkin
    FRONTIN testei pystyy siis ajamaan myös devausympäristössä, koska devausympäristössä käytetään samoja initseeder dataa

    nyt enää pitää luoda jotain toimivii testei


  -github actions
    aina kun tehdään pr masteriin niin ajetaan testit ja päästetään läpi vain jos ne menee läpi
    kaikki mikä menee läpi niin pushataan gcp docker registryyn ja deployataan stagingiin
    manuaalisesti prod:iin sitten jos kaikki toimii?

  -luodaan siis kaksi eri deploymentia staging ja prod

  -kubernetes? lol ehkä joku päivä

VAIHE 4

FRONTTI
  -desktop näkymä
    listat pitää pystyä poistamaan myös desktopissa
    listoja pitää pystyä siirtämään desktopissa (ainoa mikä puuttuu frontista)
  -se abaut sivun osioiden avaamisjuttu
  -listojen siirtäminen buginen
  -about sivulle tietoa projusta
    mihin laitan proju tiedon?
      vaihtoehdot:
        cv_components
        cover_letters
        oma taulu? jossa on aina kaikille hakemuksille sama tieto

BACKKI
  -siivoominen (ei jaksa vielä)

VAIHE 3

FRONTTI
  -optimistinen päivitys kaikkeen
  -notepadien crud. lisäys. poisto. muokkaus. ei uudelleenjärjestelyä vielä.
  -broadcast päivitykset kaikkeen
  -koodi on sotkuista. jaettu komponentti
  -siivotaan ulkonäköä
  -käännökset

BACKKI
  -db vois vaihtaa sen yhen kentän jsonb:ksi

VAIHE 2

FRONTTI
  -tänne se toinen websocket pääty
  -abaut sivu käyttämään tietokannassa olevaa. pitää vittu lisätä se kaikki sit kantaan.
  -pitää laittaa käyttämään company slugia (demo alkuun)
  -useiden notepadien käyttö. eli siis pitää pystyä valitsemaan notepaista
    -uusi näkymä missä on kaikki notepadit mitä firmalla on? siitä voi sit painamalla siirtyä

BACKKI
  -järjestyksen säilyttäminen BE
  -cv tekstit tietokannassa 
  -tietokanta uusiksi suunitelman mukaan
  -concurrency hoitaminen versioinnilla ja php jokin websocket

YHTEENSOVUTS
  -ääääääääääääääää 

YHTEENSOVITUS

VAIHE 1:

FRONTTI
todolista
  -ne on ihan yksinkertaisesti vain pinossa. (annetaanko kääntää kännyy??)
  -joku hiton navbar mistä pääsee lukemaan musta
  -saa lisätä uusia muistiinpanoja
  -voi poistaa muistiinpanoja ja muokata

abaut
  -tietoa musta eli siis CV
  -tietoa projusta (sitten kun se on hieno)


BACKKI
  -php rest api lisäyksiä ja poistoja varten


YHTEENSOVITUS

VAIHE ?
desktop näkymä silleen että kaikki listat näkyy kerralla
siistitään kaikki yhteensovitukset (ei env cors policyt etc)
testaus
cors joksikin järkeväksi
api rajoitukset gcp:lle
muistilistojen siirtely
saavutettavuus


